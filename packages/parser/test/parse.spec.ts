import {
  Address,
  ATV,
  BtcBlock,
  Coin,
  MerklePath,
  Output,
  PublicationData,
  Sha256Hash,
  VbkBlock,
  VbkMerklePath,
  VbkTx,
  VTB,
  ReadStream
} from '../src';
import BigNumber from 'bignumber.js';

describe('parse', () => {
  it('BtcBlock', () => {
    const blockBuffer = Buffer.from(
      'AAAAIPfeKZWJiACrEJr5Z3m5eaYHFdqb8ru3RbMAAAAAAAAA+FSGAmv06tijekKSUzLsi1U/jjEJdP6h66I4987mFl4iE7dchBoBGi4A8po=',
      'base64'
    );
    const stream = new ReadStream(blockBuffer);
    const block = BtcBlock.extract(stream);
    const data = block.serialize();
    expect(data.toString('hex')).toEqual(blockBuffer.toString('hex'));
  });

  it('Address', () => {
    // generated in java
    const bytes = Buffer.from(
      '01166772F51AB208D32771AB1506970EEB664462730B838E',
      'hex'
    );
    const stream = new ReadStream(bytes);
    const address = Address.read(stream);
    expect(address.address).toEqual('V5Ujv72h4jEBcKnALGc4fKqs6CDAPX');
  });

  const verifyPublicationData = (pd: PublicationData): void => {
    expect(pd.header).toEqual(Buffer.from('header bytes'));
    expect(pd.contextInfo).toEqual(Buffer.from('context info bytes'));
    expect(pd.payoutInfo).toEqual(Buffer.from('payout info bytes'));
  };

  it('PublicationData', () => {
    // generated in java
    const bytes = Buffer.from(
      '0100010C6865616465722062797465730112636F6E7465787420696E666F20627974657301117061796F757420696E666F206279746573',
      'hex'
    );
    const stream = new ReadStream(bytes);
    const pd = PublicationData.read(stream);
    verifyPublicationData(pd);
  });

  it('Coin', () => {
    // generated in java
    const bytes = Buffer.from('020539', 'hex');
    const stream = new ReadStream(bytes);
    const c = Coin.read(stream);
    expect(c.atomicUnits).toEqual(new BigNumber(1337));
  });

  const verifyMerklePath = (m: MerklePath): void => {
    const layers = '4D66077FDF24246FFD6B6979DFEDEF5D46588654ADDEB35EDB11E993C131F612:023D1ABE8758C6F917EC0C65674BBD43D66EE14DC667B3117DFC44690C6F5AF1:096DDBA03CA952AF133FB06307C24171E53BF50AB76F1EDEABDE5E99F78D4EAD:2F32CF1BEE50349D56FC1943AF84F2D2ABDA520F64DC4DB37B2F3DB20B0ECB57:93E70120F1B539D0C1495B368061129F30D35F9E436F32D69967AE86031A2756:F554378A116E2142F9F6315A38B19BD8A1B2E6DC31201F2D37A058F03C39C06C:0824705685CECA003C95140434EE9D8BBBF4474B83FD4ECC2766137DB9A44D74:B7B9E52F3EE8CE4FBB8BE7D6CF66D33A20293F806C69385136662A74453FB162:1732C9A35E80D4796BABEA76AACE50B49F6079EA3E349F026B4491CFE720AD17:2D9B57E92AB51FE28A587050FD82ABB30ABD699A5CE8B54E7CD49B2A827BCB99:DCBA229ACDC6B7F028BA756FD5ABBFEBD31B4227CD4137D728EC5EA56C457618:2CF1439A6DBCC1A35E96574BDDBF2C5DB9174AF5AD0D278FE92E06E4AC349A42'
      .split(':')
      .map(o => Sha256Hash.fromHex(o));
    const subject = Sha256Hash.fromHex(
      '94E097B110BA3ADBB7B6C4C599D31D675DE7BE6E722407410C08EF352BE585F1'
    );
    const merklePath = new MerklePath(layers, subject, 1659);
    expect(m).toEqual(merklePath);
  };

  it('MerklePath', () => {
    const bytes = Buffer.from(
      '02019F040000067B040000000C040000000400000020204D66077FDF24246FFD6B6979DFEDEF5D46588654ADDEB35EDB11E993C131F61220023D1ABE8758C6F917EC0C65674BBD43D66EE14DC667B3117DFC44690C6F5AF120096DDBA03CA952AF133FB06307C24171E53BF50AB76F1EDEABDE5E99F78D4EAD202F32CF1BEE50349D56FC1943AF84F2D2ABDA520F64DC4DB37B2F3DB20B0ECB572093E70120F1B539D0C1495B368061129F30D35F9E436F32D69967AE86031A275620F554378A116E2142F9F6315A38B19BD8A1B2E6DC31201F2D37A058F03C39C06C200824705685CECA003C95140434EE9D8BBBF4474B83FD4ECC2766137DB9A44D7420B7B9E52F3EE8CE4FBB8BE7D6CF66D33A20293F806C69385136662A74453FB162201732C9A35E80D4796BABEA76AACE50B49F6079EA3E349F026B4491CFE720AD17202D9B57E92AB51FE28A587050FD82ABB30ABD699A5CE8B54E7CD49B2A827BCB9920DCBA229ACDC6B7F028BA756FD5ABBFEBD31B4227CD4137D728EC5EA56C457618202CF1439A6DBCC1A35E96574BDDBF2C5DB9174AF5AD0D278FE92E06E4AC349A42',
      'hex'
    );
    const stream = new ReadStream(bytes);
    const subject = Sha256Hash.fromHex(
      '94E097B110BA3ADBB7B6C4C599D31D675DE7BE6E722407410C08EF352BE585F1'
    );
    const c = MerklePath.read(stream, subject);

    expect(c.subject).toEqual(subject);
    verifyMerklePath(c);
  });

  it('Output', () => {
    // generated in java
    const bytes = Buffer.from(
      '01166772F51AB208D32771AB1506970EEB664462730B838E020539',
      'hex'
    );
    const stream = new ReadStream(bytes);
    const c = Output.read(stream);
    expect(c.address.address).toEqual('V5Ujv72h4jEBcKnALGc4fKqs6CDAPX');
    expect(c.amount.atomicUnits).toEqual(new BigNumber(1337));
  });

  const verifyVbkTx = (tx: VbkTx): void => {
    expect(tx.type).toEqual(0x01);
    expect(tx.sourceAddress.address).toEqual('V5Ujv72h4jEBcKnALGc4fKqs6CDAPX');
    expect(tx.sourceAmount.atomicUnits).toEqual(new BigNumber(1000));
    expect(tx.outputs).toHaveLength(0);
    expect(tx.signatureIndex).toEqual(new BigNumber(7));
    verifyPublicationData(tx.publicationData);
    expect(tx.signature.toString('hex').toUpperCase()).toEqual(
      '30440220398B74708DC8F8AEE68FCE0C47B8959E6FCE6354665DA3ED87A83F708E62AA6B02202E6C00C00487763C55E92C7B8E1DD538B7375D8DF2B2117E75ACBB9DB7DEB3C7'
    );
    expect(tx.publicKey.toString('hex').toUpperCase()).toEqual(
      '3056301006072A8648CE3D020106052B8104000A03420004DE4EE8300C3CD99E913536CF53C4ADD179F048F8FE90E5ADF3ED19668DD1DBF6C2D8E692B1D36EAC7187950620A28838DA60A8C9DD60190C14C59B82CB90319E'
    );
  };

  it('VbkTx', () => {
    // generated in java
    const bytes = Buffer.from(

      'hex'
    );
    const stream = new ReadStream(bytes);
    const tx = VbkTx.read(stream);
    verifyVbkTx(tx);
  });

  // TODO: provide new entity, as VbkBlock changed from 64 bytes to 65
  // it('VbkPopTx', () => {
  //   // generated in java
  //   const bytes = Buffer.from(
  //     '02046002011667FF0A897E5D512A0B6DA2F41C479867FE6B3A4CAE2640000013350002A793C872D6F6460E90BED62342BB968195F8C515D3EED7277A09EFAC4BE99F95F0A15628B06BA3B44C0190B5C0495C9B8ACD0701C5235EBBBE9C02011B01000000010CE74F1FB694A001EEBB1D7D08CE6208033F5BF7263EBAD2DE07BBF518672732000000006A47304402200CF4998ABA1682ABEB777E762807A9DD2635A0B77773F66491B83EE3C87099BA022033B7CA24DC520915B8B0200CBDCF95BA6AE866354585AF9C53EE86F27362EBEC012103E5BAF0709C395A82EF0BD63BC8847564AC201D69A8E6BF448D87AA53A1C431AAFFFFFFFF02B7270D00000000001976A9148B9EA8545059F3A922457AFD14DDF3855D8B109988AC0000000000000000536A4C50000013350002A793C872D6F6460E90BED62342BB968195F8C515D3EED7277A09EFAC4BE99F95F0A15628B06BA3B44C0190B5C0495C9B8ACD0701C5235EBBBE9CD4E943EFE1864DF04216615CF92083F40000000002019F040000067B040000000C040000000400000020204D66077FDF24246FFD6B6979DFEDEF5D46588654ADDEB35EDB11E993C131F61220023D1ABE8758C6F917EC0C65674BBD43D66EE14DC667B3117DFC44690C6F5AF120096DDBA03CA952AF133FB06307C24171E53BF50AB76F1EDEABDE5E99F78D4EAD202F32CF1BEE50349D56FC1943AF84F2D2ABDA520F64DC4DB37B2F3DB20B0ECB572093E70120F1B539D0C1495B368061129F30D35F9E436F32D69967AE86031A275620F554378A116E2142F9F6315A38B19BD8A1B2E6DC31201F2D37A058F03C39C06C200824705685CECA003C95140434EE9D8BBBF4474B83FD4ECC2766137DB9A44D7420B7B9E52F3EE8CE4FBB8BE7D6CF66D33A20293F806C69385136662A74453FB162201732C9A35E80D4796BABEA76AACE50B49F6079EA3E349F026B4491CFE720AD17202D9B57E92AB51FE28A587050FD82ABB30ABD699A5CE8B54E7CD49B2A827BCB9920DCBA229ACDC6B7F028BA756FD5ABBFEBD31B4227CD4137D728EC5EA56C457618202CF1439A6DBCC1A35E96574BDDBF2C5DB9174AF5AD0D278FE92E06E4AC349A42500000C020134F09D43659EB53982D9AFB444B96FA4BB58C037D2914000000000000000000CE0B1A9A77DD0DB127B5DF4BC368CD6AC299A9747D991EC2DACBC0B699A2E4A5B3919B5C6C1F2C1773703BC001035000008020FC61CC9D4EAC4B2D14761A4D06AF8A9EF073DCD7FB5E0D000000000000000000A31508D4B101D0AD11E43EF9419C23FC277F67EDAE83C598EE70866DBCEF5E25268B9B5C6C1F2C17E11874AF50000040203F8E3980304439D853C302F6E496285E110E251251531300000000000000000039A72C22268381BD8D9DCFE002F472634A24CF0454DE8B50F89E10891E5FFB1DE08D9B5C6C1F2C1744290A925000000020BAA42E40345A7F826A31D37DB1A5D64B67B72732477422000000000000000000A33AD6BE0634647B26633AB85FA8DE258480BBB25E59C68E48BB0B608B12362B10919B5C6C1F2C1749C4D1F0473045022100F4DCE45EDCC6BFC4A1F44EF04E47E90A348EFD471F742F18B882AC77A8D0E89E0220617CF7C4A22211991687B17126C1BB007A3B2A25C550F75D66B857A8FD9D75E7583056301006072A8648CE3D020106052B8104000A03420004B3C10470C8E8E426F1937758D9FB5E97A1891176CB37D4C12D4AF4107B1AA3E8A8A754C06A22760E44C60642FBA883967C19740D5231336326F7962750C8DF99',
  //     'hex'
  //   );
  //   const stream = new ReadStream(bytes);
  //   VbkPopTx.read(stream);
  // });

  it('VbkBlock', () => {
    // generated in java
    const bytes = Buffer.from(
      '41000ee9a40002bdeb4d90c48ac5f98fbba8c4827916a4d5166f959d51d286a58bfb7b3d34f91b0c47987c4724bdaadd8dbcae81f85f98c5d304217dcb100047e0d6',
      'hex'
    );
    const stream = new ReadStream(bytes);
    const c = VbkBlock.read(stream);
    expect(c.height).toEqual(977316);
    expect(c.version).toEqual(2);
    expect(c.previousBlock.toString()).toStrictEqual('bdeb4d90c48ac5f98fbba8c4'    );
    expect(c.previousKeystone.toString()).toEqual('827916a4d5166f959d');
    expect(c.secondPreviousKeystone.toString()).toEqual('51d286a58bfb7b3d34');
    expect(c.merkleRoot.data.toString('hex').toUpperCase()).toEqual(
      'F91B0C47987C4724BDAADD8DBCAE81F8'
    );
    expect(c.timestamp).toEqual(1603847635);
    expect(c.difficulty).toEqual(69303755);
    expect(Number(c.nonce)).toEqual(68724187350);
  });

  const verifyVbkMerklePath = (c: VbkMerklePath): void => {
    expect(c.index).toEqual(0);
    expect(c.treeIndex).toEqual(1);
    expect(c.subject).toEqual(
      Sha256Hash.fromHex(
        '1FEC8AA4983D69395010E4D18CD8B943749D5B4F575E88A375DEBDC5ED22531C'
      )
    );
    const layers = [
      '0000000000000000000000000000000000000000000000000000000000000000',
      '0000000000000000000000000000000000000000000000000000000000000000',
    ].map(o => Sha256Hash.fromHex(o));

    expect(c.layers).toEqual(layers);
  };

  it('VbkMerklePath', () => {
    // generated in java
    const bytes = Buffer.from(
      '04000000010400000000201FEC8AA4983D69395010E4D18CD8B943749D5B4F575E88A375DEBDC5ED22531C0400000002200000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000',
      'hex'
    );
    const stream = new ReadStream(bytes);
    const c = VbkMerklePath.read(stream);
    verifyVbkMerklePath(c);
  });

  it('ATV', () => {
    const bytes = Buffer.from(
      '0000000101f7aa010116680d03673f6c74fba19216272030410b7c8b61a17e650303c4d80001bf01d4033ae6ca015000000830f2897de808af9b111f6c6e751cc84f659dd893141eb50364c363945c0b0000001a31c892c945d9559c4f75dde8cce0afeb904fc9f4a8d7c2d4ea00d05a2cd26012c5985fffff0f1d369d6a050164000016ccf2897de808af9b111f6c6e751cc84f659dd893141eb50364c363945c0b000000f569359cdab9eb1246d0c0a80c26d81d1c9e16202846f028bcdf56ce0500000047a7fe66d4777f923761f104179911f5179d9864e84888afc3b80abef150e1f8011600145972c208abe860541853d9fea551e916da83d9e84730450220403fc11d15cd8d8eccd89bcfb355f322eb61418d19c0c7bf614049497dfd73f1022100caf24a66154e27ecdef83905fae266cd7c7e79fcd82b444d897cd02074b1c1ca583056301006072a8648ce3d020106052b8104000a03420004ae5585fc3fd33c2af805bc5fa9ca08fcb09ad902d21403379d48cf885b85a71e610f373b879ca871d98981b4a5f836f45e0876353bf467a4db0b05a60324c684040000000104000000032082bbcd488aeea49926435555190c03fc7f91ed56af30f51744a5d1567521c7b504000000052029410b4e819caa05b10b8db807dfddcd3ca8feddb3eda5f08c5df90278fd4d2e2091cad4544e80945d779fd6bf6ff986312a0b85624c304a707041771c67fb1dea20339513975879a7f9180c4381d8a5ddadc5537e404ea1f662ba123cb41f52e5ea20000000000000000000000000000000000000000000000000000000000000000020de3b39591f04c4cdcfcde951085f44b1bca80605fce1da2c3c5e8aa32b01011e41000ee9a30002cf538cb21f279497a49c0bb0827916a4d5166f959d51d286a58bfb7b3d3473ce4a22cd380732ed719e96631999e55f98c5520420e121005b86f3f3',
      'hex'
    );
    const stream = new ReadStream(bytes);

    const a = ATV.read(stream);

    expect(a.version).toEqual(1);
  });

  it('VTB', () => {
    const bytes = Buffer.from(
      '000000010202bbaa0201166751ffd8942926a53c55d979c5fd3458a13e6a51a28441000ee90800023bec7f53c69568b02db257b6d6639cd7311d88a93aaf2f180130af4e802bcdfb0ba3e9b6b7c6e932ae355c6f20625f98b3d3041df5d71001bd723f01ae010000000126de60f435f1ae4afd8faf75645dbf02110a9175ed043b4cdedcf151e7718dff0100000000ffffffff027e240a0000000000160014975878bef18d7b597af980ca7b058ea79cb370e50000000000000000536a4c50000ee90800023bec7f53c69568b02db257b6d6639cd7311d88a93aaf2f180130af4e802bcdfb0ba3e9b6b7c6e932ae355c6f20625f98b3d3041df5d71001bd723f27de9305ad5bc9212a4ce706aebc740000000001b80400000009040000000504000000040000002020f7b876c33a145765f193650f988a72ab06b8f921bf9ebc2be3e95aac3366e473203542528ae4a3f3da770c44f897867c76b2cf6e7438fc832de06340dc05479f64204679d59461f0985e6da8671c05a3acba575a8cd681e81c8cb374476a245e7a0a20947d6dca8eb2d5a92c797d45ccca95f55fb8a4ed776d1c39e08525303c3e006820cae38f1e2127d26a5b25bbbd999e163b5473f6f15f9dd0032ad6848698a5445850000000208e8c7362cc3b57dddaaa3c67130bb370a50aa2c3c5f8fd3a0300000000000000e68dfe0fea097422a313700b5c8f84e3b92b23ca3dd053c5f3df90a34833996795b5985fbbb7001aedd9640a01025000e00220276576eaa80de37e815c2f7f5eda76c655be49e085eb6ea791ed55c0000000004ba77af0d493ae62295a3f73b326864b0fdefb07ae38b47450bb7c9461f23a5641b3985fbbb7001a382489c1500000ff3f9286f65d74f6521942b8af26ba716950572479550c25c413620000000000000035bd36e372a7deaf2f6e478f5d65df4b658072018307a79d8e8e2ceebd0033624db4985fbbb7001a122ce91147304502204cc8c466fc3b1a1a838a014555a7ce375df5f667125bdd73657a951adf859cb4022100d2c053b38ec6977efaa99e1fbc54fe328276df4ab76a8a421c674a6d331413fd583056301006072a8648ce3d020106052b8104000a034200043c0617fe1d5f1b45e3783431a3902afbd6ea03bd4c9a8c6f6c943440235786cb1dade80afa0122f29eae9e0ed0774a0cba927cf82baa3c86679987bb3f237d6a04000000000400000000207a4c3ee5949276dc985997a0945d1feae757fee981d158f034ff5c57e825fc50040000000220d0d5e112ac7f30bd2a7fd3aca2edd45917e9c15db0b3e2945414095480b9a5382074314e01c0ea70d557d02ece29095a20c0e3c1a608f97cc119e2cc8d6421f9c441000ee91500020ffa3db3f79353c7196a34b20369ddc346967e9220d6639cd7311d88a93a5083a810d10f78adfc7a8392ca39d97f5f98b589041c96e21008baa13b',
      'hex'
    );
    const stream = new ReadStream(bytes);

    const a = VTB.read(stream);

    {
      // check vbk merkle path
      const treeIndex = 0;
      const index = 0;
      const subject = Sha256Hash.fromHex(
        '7a4c3ee5949276dc985997a0945d1feae757fee981d158f034ff5c57e825fc50'
      );
      const layers = 'd0d5e112ac7f30bd2a7fd3aca2edd45917e9c15db0b3e2945414095480b9a538:74314e01c0ea70d557d02ece29095a20c0e3c1a608f97cc119e2cc8d6421f9c4'
        .split(':')
        .map(o => Sha256Hash.fromHex(o));

      const mp = new VbkMerklePath(treeIndex, layers, subject, index);
      expect(a.merklePath).toEqual(mp);
    }

    expect(a.version).toEqual(1)
  });
});
